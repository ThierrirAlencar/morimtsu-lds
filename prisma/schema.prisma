
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Rank {
  WHITE        // Faixa Branca
  GRAY         // Faixa Cinza
  YELLOW       // Faixa Amarela
  ORANGE       // Faixa Laranja
  GREEN        // Faixa Verde
  BLUE         // Faixa Azul
  PURPLE       // Faixa Roxa
  BROWN        // Faixa Marrom
  BLACK        // Faixa Preta
  RED_BLACK    // Faixa Vermelha e Preta (Coral)
  RED_WHITE    // Faixa Vermelha e Branca (Coral)
  RED          // Faixa Vermelha (Mestre)
}


model User {
  id String @id @default(uuid())

  //true data
  password String
  role Role @default(USER)

  //prime keys
  name String @unique 
  email String @unique
  
  //Foreign keys
  users UserClasses[]
}

model Class {
  id String @id @default(cuid())
  
  //True data
  name String @unique
  description String?

  icon_url String? 

  startTime DateTime? @db.Time  // apenas hor√°rio (sem data)
  endTime   DateTime? @db.Time

  maxAge Int @default(99)
  minAge Int @default(0)
  
  //Foreign keys
  classes UserClasses[]
  students StudentClasses[]
} 

model student {
  id String @id @default(uuid())
  
  //True data
  name String
  nickname String?
  Contact String 
  birthDate DateTime

  //Prime keys
  email String @unique
  CPF String @unique
  
  //Parent contact
  parentName String?
  parentContact String?

  //Extra
  createdAt DateTime @default(now())


  //Relations
  classes StudentClasses[]
  formData StudentForm?
}

model StudentForm{
  id String @id @default(cuid())

  //True data
  Rating Int @default(0)
  Presence Int @default(0)
  Comments String?
  Rank Rank @default(WHITE)

  //Foreign Keys
  student student @relation(fields: [studentId], references: [id])
  studentId String @unique
}


//Relational classes (FK Classes to many to many relations)

model UserClasses {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  class   Class  @relation(fields: [classId], references: [id])
  classId String

  @@id([userId, classId])
}

model StudentClasses {
  student    student   @relation(fields: [studentId], references: [id])
  studentId  String
  class      Class     @relation(fields: [classId], references: [id])
  classId    String

  @@id([studentId, classId])
}
