POST http://127.0.0.1:3000/user 
Content-Type: application/json

{
    "name":"ts",
    "email":"e@gmail.com",
    "password":"admin123",
    "role":"USER"
}

### Enviar c√≥digo de recupera√ß√£o
PATCH https://morimtsu-lds.onrender.com/auth
Content-Type: application/json

{
  "email": "usuario@exemplo.com"
}

### Atualizar senha do usu√°rio
PUT http://127.0.0.1:3000/auth
Content-Type: application/json

{
  "passport": "usuario123",
  "refString": "codigo-de-verificacao",
  "newPassword": "NovaSenhaSegura123!"
}

### üîê Login do usu√°rio
POST https://morimtsu-lds.onrender.com/user/login
Content-Type: application/json

{
  "Email": "s@gmail.com",
  "Password": "admin123"
}

### ‚öôÔ∏è Atualizar dados do usu√°rio (PUT /user/:id)
PUT http://127.0.0.1:3000/user/1f1a2b3c-4d5e-6f7a-8b9c-0d1e2f3a4b5c
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Novo Nome de Usu√°rio",
}

### üóëÔ∏è Excluir usu√°rio (DELETE /user/:id)
DELETE http://127.0.0.1:3000/user/1f1a2b3c-4d5e-6f7a-8b9c-0d1e2f3a4b5c
Authorization: Bearer {{token}}

### üë§ Obter perfil do usu√°rio (GET /user/:id/profile)
GET http://127.0.0.1:3000/user/1f1a2b3c-4d5e-6f7a-8b9c-0d1e2f3a4b5c/profile
Authorization: Bearer {{token}}

# REST tests for classController
# Substitua {{baseUrl}} pelo endere√ßo da sua API (ex: http://localhost:3000)
# Ap√≥s criar a class, copie o id retornado e substitua {{classId}} nos requests seguintes.

### Create class (without coachId)
POST http://127.0.0.1:3000/class
Content-Type: application/json

{
  "iconURL":"askkahsjjaksjjskaskaj",
  "name": "Test Class REST - without coach v1",
  "description": "Classe criada pelo teste REST"
}

### Create class (with coachId)
POST https://morimtsu-lds.onrender.com/class
Content-Type: application/json

{
  "name": "Test Class With Coach Sla",
  "description": "Classe com coach fornecido",
  "coachId": "00000000-0000-0000-0000-000000000000"
}

### Get class by id
GET https://morimtsu-lds.onrender.com/class/cmh0lx2fe0000ildk9cbn0s0p
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4MWI2ZWE5Mi03MzRkLTQwZDItOGYwZC03MDAzZTM1NDY5MzMiLCJpYXQiOjE3NjExNDEzNDQsImV4cCI6MTc2MTc0NjE0NH0.nJMOFHu4hechTHrmyzXa8vvUMz9LOU8R9nSxPv02lHQ

### Update class
PUT http://127.0.0.1:3000/class/cmh0lx2fe0000ildk9cbn0s0p
Content-Type: application/json

{
  "description": "Descri√ß√£o atualizada"
}

### Delete class
DELETE http://127.0.0.1:3000/class/cmh0lx2fe0000ildk9cbn0s0p

### Get filtered classes (only query)
GET https://morimtsu-lds.onrender.com/class
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4MWI2ZWE5Mi03MzRkLTQwZDItOGYwZC03MDAzZTM1NDY5MzMiLCJpYXQiOjE3NjExNDEzNDQsImV4cCI6MTc2MTc0NjE0NH0.nJMOFHu4hechTHrmyzXa8vvUMz9LOU8R9nSxPv02lHQ

# REST tests for StudentController
# Replace {{baseUrl}} with your server address (ex: http://localhost:3000)
# Replace IDs ({{studentId}}, {{classId}}) with real values returned by create requests.

### Create student
POST http://127.0.0.1:3000/student
Content-Type: application/json

{
  "name": "Pedro Felipe",
  "email": "Pedro.Felipe@example.com",
  "CPF": "12127818738273",
  "contact": "+5511999999999",
  "birthDate": "1999-04-15",
  "nickname": "Pedrinho matador",
  "rank": "BRANCA",
  "comments": "Beginner",
  "presence": 100,
  "rating": 5
}

### Get student by id
GET {{baseUrl}}/student/{{studentId}}


### Update student personal info
PUT {{baseUrl}}/student/{{studentId}}/personal
Content-Type: application/json

{
  "name": "Jo√£o S. Updated",
  "contact": "+5511988888888",
  "nickname": "JoaoUpdated"
}

### Update student form
PUT {{baseUrl}}/student/{{studentId}}/form
Content-Type: application/json

{
  "Rank": "YELLOW",
  "Comments": "Improved technique",
  "Presence": 95,
  "Rating": 4
}

### Delete student
DELETE {{baseUrl}}/student/{{studentId}}


### Student joins a class
POST {{baseUrl}}/student/{{studentId}}/join/{{classId}}


### Query students - full filter
GET {{baseUrl}}/student?query=Joao&minAge=10&maxAge=18&CPF=12345678900&email=joao.silva@example.com&Presence=100&Rank=WHITE&class={{classId}}

### Query students - by text only
GET {{baseUrl}}/student?query=Silva

### Query students - by age range only
GET {{baseUrl}}/student?minAge=8&maxAge=12